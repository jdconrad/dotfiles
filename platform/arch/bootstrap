#!/usr/bin/env bash

set -x
set -e

uncomment() {
  sed -i "s/#$2/$2/" $1
}

USERNAME=${USERNAME:-rjernst}

echo "----> Adding user $USERNAME"
id rjernst &> /dev/null || useradd -m $USERNAME
passwd $USERNAME
echo -e "--------------------\n"

echo "----> Giving $USERNAME sudo access"
pacman -S --noconfirm --needed sudo
groups $USERNAME | grep "wheel" &> /dev/null || gpasswd -a $USERNAME wheel
uncomment /etc/sudoers '%wheel ALL=(ALL) ALL'
echo -e "--------------------\n"

echo "----> Installing ssh"
pacman -S --noconfirm --needed openssh
SSH_KEY=/home/$USERNAME/.ssh/id_ed25519.pub
if [ ! -f "$SSH_KEY" ]; then
  sudo -u $USERNAME ssy-keygen -t ed25519
  echo "========================================"
  echo "Give the following key access in github:"
  sudo -u $USERNAME cat $SSH_KEY
  read -p "Press enter to continue"
fi
echo -e "--------------------\n"

echo "----> Installing git"
pacman -S --noconfirm --needed git
echo -e "--------------------\n"

echo "----> Configuring zsh shell"
pacman -S --noconfirm --needed zsh
chsh -s /bin/zsh $USERNAME
echo -e "--------------------\n"

echo "----> Installing dotfiles"
DOTFILES=/home/$USERNAME/.dotfiles
if [ ! -d "$DOTFILES" ]; then
  sudo -u $USERNAME git clone git@github.com:$USERNAME/dotfiles.git $DOTFILES
  cd $DOTFILES
  sudo -u $USERNAME git checkout zsh # TODO: remove
  sudo -u $USERNAME git submodule init
fi
sudo -u $USERNAME git submodule update
sudo -u $USERNAME $DOTFILES/install
echo -e "--------------------\n"

link_etc() {
  CONFIG_FILE=/etc/$2/$3
  if [ ! -d "$(dirname $CONFIG_FILE)" ]; then
    mkdir -p "$(dirname $CONFIG_FILE)"
  fi
  if [ ! -L "$CONFIG_FILE" ]; then
    ln -s $1/$3 "$CONFIG_FILE"
  fi
}

echo "----> Configuring packages" 
ARCH_FILES=$DOTFILES/platform/arch
HOST_FILES=$ARCH_FILES/$HOSTNAME
[ -d $HOST_FILES ] || sudo mkdir $HOST_FILES
command -v aurman &> /dev/null || {
  pacman -S --noconfirm --needed base-devel
  sudo -u $USERNAME git clone https://aur.archlinux.org/aurman.git /tmp/aurman
  cd /tmp/aurman
  sudo -u $USERNAME makepkg -si --noconfirm
  cd -
} 
mkdir -p /etc/pacman.d/hooks
sed -i 's/#HookDir/HookDir/' /etc/pacman.conf
link_etc $ARCH_FILES/pacman "pacman.d/hooks" "paclist.hook"
link_etc $ARCH_FILES/pacman "pacman.d/hooks" "aurlist.hook"
link_etc $HOST_FILES "pacman.d" "paclist.txt"
link_etc $HOST_FILES "pacman.d" "aurlist.txt"

PACLIST_FILE=$HOST_FILES/paclist.txt
if [ -f $PACLIST_FILE ]; then
  pacman -S --noconfirm --needed - < $PACLIST_FILE
fi
# aurman does not work with stdin for package names, so use xargs
AURLIST_FILE=$HOST_FILES/aurlist.txt
cat $AURLIST_FILE | xargs aurman -S --noconfirm --needed

link_etc $ARCH_FILES/java "oracle/java" "usagetracker.properties"
echo -e "--------------------\n"

echo "----> Enabling remote ssh access"
AUTH_KEYS=/home/$USERNAME/.ssh/authorized_keys
if [ ! -f "$AUTH_KEYS" ]; then
  echo "========================================"
  echo "Hosts available:"
  KEYS_DIR=/home/$USERNAME/.dotfiles/platform/ssh-keys
  sudo -u $USERNAME ls -1 $KEYS_DIR | sed -e 's/\.pubkey$//' | sed -e 's/^/  /'
  echo "Enter the authorized host names:"
  read HOSTNAMES
  for HOSTNAME in $HOSTNAMES; do
    HOST_KEYFILE=$KEYS_DIR/$HOSTNAME.pubkey
    if [ ! -f $HOST_KEYFILE ]; then
      echo "Unknown host $HOSTNAME"
      sudo -u $USERNAME rm -f $AUTH_KEYS
      exit 1
    fi
    sudo -u $USERNAME bash -c "cat $HOST_KEYFILE >> $AUTH_KEYS"
  done
  read -p "Press enter to continue"
fi
uncomment /etc/ssh/sshd_config 'PermitRootLogin no'
uncomment /etc/ssh/sshd_config 'PasswordAuthentication no'
systemctl enable sshd
systemctl start sshd
echo -e "--------------------\n"


